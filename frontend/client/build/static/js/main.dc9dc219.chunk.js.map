{"version":3,"sources":["../node_modules/peerjs/dist sync","components/Call.js","components/Dashboard.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Box","styled","div","Row","Video","video","Call","props","socket","io","streamDataREf","useRef","peerStreamDataRef","peers","useEffect","myPeer","Peer","console","log","call","on","emit","roomId","navigator","mediaDevices","getUserMedia","audio","then","stream","addVideoStream","videoRef","current","srcObject","answer","userVideoStream","userId","connectToNewUser","close","catch","err","className","ref","muted","autoPlay","Dashboard","handleChange","handleRoomUrl","setRoomId","inputFeild","useState","createInput","setCreateInput","joinInput","setJoinInput","uuidV4","to","onClick","onChange","placeholder","hidden","App","setInputField","target","value","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.dc9dc219.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 137;","import React, { useState, useEffect, useRef } from 'react';\r\n\r\nimport io from 'socket.io-client';\r\n// import Peer from 'simple-peer';\r\nimport Peer from 'peerjs';\r\nimport styled from 'styled-components';\r\n\r\nimport logo from '../logo.svg';\r\nimport '../App.css';\r\nimport Dashboard from './Dashboard';\r\n\r\nfunction Call(props) {\r\n  const socket = io()\r\n\r\n  let streamDataREf = useRef()\r\n  let peerStreamDataRef = useRef()\r\n  const peers = {}\r\n\r\n  useEffect(() => {\r\n    const myPeer = new Peer()\r\n    console.log(myPeer.call())\r\n    myPeer.on('open', id => {\r\n      socket.emit('joinRoom', props.roomId, myPeer.id);\r\n    })\r\n\r\n    // get stream\r\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n      .then(stream => {\r\n        addVideoStream(streamDataREf, stream)\r\n\r\n        myPeer.on('call', call => {\r\n          call.answer(stream)\r\n          call.on('stream', userVideoStream => {\r\n            addVideoStream(peerStreamDataRef, userVideoStream)\r\n          })\r\n        })\r\n\r\n        socket.on('userConnected', userId => {\r\n          connectToNewUser(userId, stream)\r\n        })\r\n\r\n        socket.on('userDisconnected', userId => {\r\n          if (peers[userId]) peers[userId].close()\r\n        })\r\n\r\n        function addVideoStream(videoRef, stream) {\r\n          videoRef.current.srcObject = stream\r\n        }\r\n\r\n        function connectToNewUser(userId, stream) {\r\n          const call = myPeer.call(userId, stream)\r\n          call.on('stream', userVideoStream => {\r\n            addVideoStream(peerStreamDataRef, userVideoStream)\r\n          })\r\n          call.on('close', () => {\r\n            //video.remove()\r\n            peerStreamDataRef = ''\r\n          })\r\n\r\n          peers[userId] = call\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('swag', err)\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <Box className=\"row\">\r\n          <Row>\r\n            <div className=\"video-container\">\r\n              <div className=\"embed-responsive\">\r\n                <Video ref={streamDataREf} className=\"embed-responsive-item\" muted autoPlay>\r\n                </Video>\r\n              </div>\r\n            </div>\r\n            <div className=\"video-container\">\r\n              <div className=\"embed-responsive\">\r\n                <Video ref={peerStreamDataRef} className=\"embed-responsive-item\" autoPlay></Video>\r\n              </div>\r\n            </div>\r\n          </Row>\r\n          <Row>\r\n            <div className=\"video-container\">\r\n              <div className=\"embed-responsive\">\r\n                <Video className=\"embed-responsive-item\" autoPlay></Video>\r\n              </div>\r\n            </div>\r\n            <div className=\"video-container\">\r\n              <div className=\"embed-responsive\">\r\n                <Video className=\"embed-responsive-item\" autoPlay></Video>\r\n              </div>\r\n            </div>\r\n          </Row>\r\n        </Box>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Box = styled.div`\r\n display: flex\r\n`\r\n\r\nconst Row = styled.div`\r\n\r\n`\r\n\r\nconst Video = styled.video`\r\n  width: 70%;\r\n  border: 2px solid black;\r\n  transform: rotateY(180deg);\r\n  /* safari an chrome */\r\n  -webkit-transform: rotateY(180deg);\r\n  /* Firefox */\r\n  -moz-transform: rotateY(180deg)\r\n`\r\n\r\nexport default Call;","import React, { useState, useEffect } from 'react';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport { AiFillCaretRight } from 'react-icons/ai'\r\nimport { v4 as uuidV4 } from 'uuid'\r\n\r\nimport Call from './Call'\r\n\r\nfunction Dashboard({ handleChange, handleRoomUrl, roomId, setRoomId, inputFeild }) {\r\n  const [createInput, setCreateInput] = useState(true)\r\n  const [joinInput, setJoinInput] = useState(true)\r\n\r\n  useEffect(() => {\r\n    setRoomId(uuidV4())\r\n  }, [])\r\n\r\n  const handleClick = (input) => {\r\n    if (input) {\r\n      setCreateInput(false)\r\n    } else {\r\n      setCreateInput(true)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Welcome to some Video Peer-to-Peer App</h2>\r\n      <div>\r\n        <Link to={`/call/${roomId}`}>\r\n          <button onClick={() => handleClick(createInput)} >create room</button>\r\n        </Link>\r\n      </div>\r\n      <div>\r\n        <button onClick={() => joinInput ? setJoinInput(false) : setJoinInput(true)}>join room</button>\r\n        <input onChange={handleChange} placeholder='Enter room id' hidden={joinInput} />\r\n        <Link to={`/call/${inputFeild}`} hidden={joinInput}><AiFillCaretRight /></Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport { AiFillCaretRight } from 'react-icons/ai'\r\n\r\nimport io from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\nimport styled from 'styled-components';\r\n\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport Dashboard from './components/Dashboard'\r\nimport Call from './components/Call'\r\n\r\n\r\nfunction App() {\r\n  const [createInput, setCreateInput] = useState(true)\r\n  const [joinInput, setJoinInput] = useState(true)\r\n  const [inputFeild, setInputField] = useState('')\r\n  const [roomId, setRoomId] = useState('')\r\n\r\n  const handleChange = (e) => {\r\n    setInputField(e.target.value)\r\n    console.log(inputFeild)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <Route exact path=\"/\" render={props =>\r\n          <Dashboard {...props}\r\n            createInput={createInput}\r\n            roomId={roomId}\r\n            setRoomId={setRoomId}\r\n            handleChange={handleChange}\r\n            inputFeild={inputFeild} />} />\r\n        <Route path=\"/call\" render={props => <Call {...props} inputFeild={inputFeild} roomId={inputFeild || roomId} />} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}