{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["socket","io","App","useState","peerVideo","setPeerVideo","streamDataREf","useRef","client","useEffect","navigator","mediaDevices","getUserMedia","video","audio","then","stream","initPeer","type","peer","Peer","initiator","trickle","on","destroy","emit","current","srcObject","offer","data","signal","answer","gotAnswer","console","log","catch","err","className","width","ref","muted","autoPlay","hidden","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"sPAMMA,EAASC,IAAG,yBAwGHC,MAtGf,WAAe,MAGqBC,oBAAS,GAH9B,mBAGNC,EAHM,KAGKC,EAHL,KAKTC,EAAgBC,mBAChBC,EAAS,GAyEX,OAvEFC,qBAAU,WAGRC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,EAAMC,OAAO,IACzDC,MAAK,SAAAC,GASJ,SAASC,EAASC,GAChB,IAAIC,EAAO,IAAIC,IAAK,CAAEC,UAAqB,SAATH,EAAiCF,OAAQA,EAAQM,SAAS,IAQ5F,OAPAH,EAAKI,GAAG,UAAU,SAAUP,GAsC5BX,GAAa,MAnCbc,EAAKI,GAAG,SAAS,WAEfJ,EAAKK,aAEAL,EAjBTnB,EAAOyB,KAAK,aAEZnB,EAAcoB,QAAQC,UAAYX,EAqDlChB,EAAOuB,GAAG,aAtBV,SAAqBK,GACnB,IAAIT,EAAOF,EAAS,YACpBE,EAAKI,GAAG,UAAU,SAACM,GACjB7B,EAAOyB,KAAK,SAAUI,MAExBV,EAAKW,OAAOF,MAkBd5B,EAAOuB,GAAG,cAfV,SAAsBQ,GACpBvB,EAAOwB,WAAY,EACRxB,EAAOW,KACbW,OAAOC,MAad/B,EAAOuB,GAAG,iBANV,WACEU,QAAQC,IAAI,6CAMdlC,EAAOuB,GAAG,cArCV,WACEf,EAAOwB,WAAY,EACnB,IAAIb,EAAOF,EAAS,QACpBE,EAAKI,GAAG,UAAU,SAASM,GACrBrB,EAAOwB,WACThC,EAAOyB,KAAK,QAASI,MAGzBrB,EAAOW,KAAOA,QAgCjBgB,OAAM,SAAAC,GACLH,QAAQC,IAAI,OAAQE,QAErB,IAGD,yBAAKC,UAAU,OACb,gCAEE,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,oBACb,2BAAOC,MAAM,QAAQC,IAAKjC,EAAe+B,UAAU,wBAAwBG,OAAK,EAACC,UAAQ,MAK7F,yBAAKJ,UAAU,mBACb,yBAAKA,UAAU,oBACb,2BAAOK,OAAQtC,EAAWiC,UAAU,wBAAwBI,UAAQ,UCzF9DE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB1C,WACrBA,UAAU2C,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLxB,QAAQwB,MAAMA,EAAMC,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.d590311b.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport io from 'socket.io-client';\nimport Peer from 'simple-peer';\n\nconst socket = io('http://localhost:4000')\n\nfunction App() {\n\n  // const [streamData, setStreamData] = useState({})\n  const [peerVideo, setPeerVideo] = useState(true)\n  // const [video, setVideo] = useState(true)\n  let streamDataREf = useRef()\n  let client = {}\n\n  useEffect(() =>{\n    \n    // get stream\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n    .then(stream => {\n      socket.emit('NewClient');\n\n      streamDataREf.current.srcObject = stream\n      // setVideo(streamDataREf);\n      // video.srcObject = stream;\n      // setStreamData(stream)\n\n      // to initialize a peer\n      function initPeer(type) {\n        let peer = new Peer({ initiator: (type === 'init') ? true : false, stream: stream, trickle: false })\n        peer.on('stream', function (stream) {\n          createVideo(stream)\n        })\n        peer.on('close', function () {\n          //\n          peer.destroy()\n        })\n        return peer\n      }\n\n      // create peer of type init\n      function makePeer() {\n        client.gotAnswer = false\n        let peer = initPeer('init')\n        peer.on('signal', function(data) {\n          if(!client.gotAnswer) {\n            socket.emit('offer', data)\n          }\n        })\n        client.peer = peer\n      }\n\n      // for peer of type not init\n      function frontAnswer(offer) {\n        let peer = initPeer('not init')\n        peer.on('signal', (data) => {\n          socket.emit('Answer', data)\n        })\n        peer.signal(offer)\n      }\n      \n      function signalAnswer(answer) {\n        client.gotAnswer = true\n        let peer = client.peer\n        peer.signal(answer)\n      }\n      \n      function createVideo(stream) {\n        setPeerVideo(false)\n      }\n      \n      function sessionActive() {\n        console.log('session active. please come back later')\n      }\n      \n      socket.on('BackOffer', frontAnswer)\n      socket.on('BackAnswer', signalAnswer)\n      socket.on('SessionActive', sessionActive)\n      socket.on('CreatePeer', makePeer)\n      \n    })\n    .catch(err => {\n      console.log('swag', err)\n    })\n  }, [])\n    \n    return (\n    <div className=\"App\">\n      <header >\n         {/* className=\"App-header\"> */}\n        <div className=\"row\">\n          <div className=\"video-container\">\n            <div className=\"embed-responsive\">\n              <video width='400px' ref={streamDataREf} className=\"embed-responsive-item\" muted autoPlay>\n                {/* <source src={streamData} /> */}\n              </video>\n            </div>\n          </div>\n          <div className=\"video-container\">\n            <div className=\"embed-responsive\">\n              <video hidden={peerVideo} className=\"embed-responsive-item\" autoPlay></video>\n            </div>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}