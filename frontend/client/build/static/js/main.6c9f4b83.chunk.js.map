{"version":3,"sources":["components/Call.js","components/Dashboard.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Box","styled","div","Row","Video","video","Call","props","socket","io","streamDataREf","useRef","peerStreamDataRef","client","useEffect","navigator","mediaDevices","getUserMedia","audio","then","stream","initPeer","type","peer","Peer","initiator","on","err","console","log","peerStream","current","srcObject","createVideo","connect","destroy","emit","offer","data","signal","answer","gotAnswer","catch","className","ref","muted","autoPlay","Dashboard","handleChange","useState","createInput","setCreateInput","joinInput","setJoinInput","onClick","onChange","placeholder","hidden","to","App","inputFeild","setInputField","e","target","value","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.6c9f4b83.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nimport io from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\nimport styled from 'styled-components';\r\n\r\nimport logo from '../logo.svg';\r\nimport '../App.css';\r\nimport Dashboard from './Dashboard'\r\n\r\nfunction Call(props) {\r\n  debugger\r\n  const socket = io()\r\n\r\n  let streamDataREf = useRef()\r\n  let peerStreamDataRef = useRef()\r\n  let client = {}\r\n\r\n  useEffect(() => {\r\n\r\n    // get stream\r\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n      .then(stream => {\r\n        socket.emit('NewClient');\r\n\r\n        streamDataREf.current.srcObject = stream\r\n\r\n        // used to initialize a peer\r\n        function initPeer(type) {\r\n          let peer = new Peer({\r\n            initiator: (type === 'init') ? true : false,\r\n            stream: stream,\r\n            // trickle: true,\r\n            // config: {\r\n            //   iceServers: [\r\n            //     { urls: 'stun:stun.l.google.com:19302' },\r\n            //     { urls: 'stun:global.stun.twilio.com:3478?transport=udp' },\r\n            //     { 'url': 'turn:192.158.29.39:3478?transport=udp',\r\n            //       'credential': 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\r\n            //       'username': '28224511:1379330808'\r\n            //     },\r\n            //     {\r\n            //       'url': 'turn:192.158.29.39:3478?transport=tcp',\r\n            //       'credential': 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\r\n            //       'username': '28224511:1379330808'\r\n            //     }\r\n            //   ]\r\n            // }\r\n\r\n            // config: '{\"rtcpMuxPolicy\":\"require\",\"bundlePolicy\":\"max-bundle\",\"iceServers\":[{\"urls\":[\"stun:74.125.140.127:19302\",\"stun:[2a00:1450:400c:c08::7f]:19302\"]},{\"urls\":[\"turn:209.85.203.127:19305?transport=udp\",\"turn:[2a00:1450:400b:c03::7f]:19305?transport=udp\",\"turn:209.85.203.127:19305?transport=tcp\",\"turn:[2a00:1450:400b:c03::7f]:19305?transport=tcp\"],\"username\":\"CLXnjvYFEgZZTdGSvSQYzc/s6OMTIICjBQ\",\"credential\":\"80aSa59oAHNC2ZB7qxekT4vVmWQ=\",\"maxRateKbps\":\"8000\"}],\"certificates\":[{}]}';\r\n          })\r\n          peer.on('error', function (err) {\r\n            console.log(err)\r\n          })\r\n          peer.on('stream', function (peerStream) {\r\n            createVideo(peerStream)\r\n          })\r\n          peer.on('close', function () {\r\n            peerStreamDataRef.connect.srcObject = null\r\n            // socket.emit('Disconnect')\r\n            peer.destroy()\r\n          })\r\n          return peer\r\n        }\r\n\r\n        function removeVideo() {\r\n          peerStreamDataRef.connect.srcObject = null\r\n          socket.emit('Disconnect')\r\n        }\r\n\r\n        // create peer of type init\r\n        function makePeer() {\r\n          client.gotAnswer = false\r\n          let peer = initPeer('init')\r\n          peer.on('signal', function (data) {\r\n            if (!client.gotAnswer) {\r\n              socket.emit('Offer', data)\r\n            }\r\n          })\r\n          client.peer = peer\r\n        }\r\n\r\n        // for peer of type not init\r\n        function frontAnswer(offer) {\r\n          let peer = initPeer('notinit')\r\n          peer.on('signal', (data) => {\r\n            socket.emit('Answer', data)\r\n          })\r\n          peer.signal(offer)\r\n        }\r\n\r\n        function signalAnswer(answer) {\r\n          client.gotAnswer = true\r\n          let peer = client.peer\r\n          peer.signal(answer)\r\n        }\r\n\r\n        function createVideo(stream) {\r\n          debugger\r\n          peerStreamDataRef.current.srcObject = stream\r\n        }\r\n\r\n        function sessionActive() {\r\n          console.log('session active. please come back later')\r\n        }\r\n\r\n        socket.on('BackOffer', frontAnswer)\r\n        socket.on('BackAnswer', signalAnswer)\r\n        socket.on('SessionActive', sessionActive)\r\n        socket.on('CreatePeer', makePeer)\r\n        socket.on('RemoveVideo', removeVideo)\r\n\r\n      })\r\n      .catch(err => {\r\n        console.log('swag', err)\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <Box className=\"row\">\r\n          <Row>\r\n            <div className=\"video-container\">\r\n              <div className=\"embed-responsive\">\r\n                <Video ref={streamDataREf} className=\"embed-responsive-item\" muted autoPlay>\r\n                </Video>\r\n              </div>\r\n            </div>\r\n            <div className=\"video-container\">\r\n              <div className=\"embed-responsive\">\r\n                <Video ref={peerStreamDataRef} className=\"embed-responsive-item\" autoPlay></Video>\r\n              </div>\r\n            </div>\r\n          </Row>\r\n          <Row>\r\n            <div className=\"video-container\">\r\n              <div className=\"embed-responsive\">\r\n                <Video className=\"embed-responsive-item\" autoPlay></Video>\r\n              </div>\r\n            </div>\r\n            <div className=\"video-container\">\r\n              <div className=\"embed-responsive\">\r\n                <Video className=\"embed-responsive-item\" autoPlay></Video>\r\n              </div>\r\n            </div>\r\n          </Row>\r\n        </Box>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Box = styled.div`\r\n display: flex\r\n`\r\n\r\nconst Row = styled.div`\r\n\r\n`\r\n\r\nconst Video = styled.video`\r\n  width: 70%;\r\n  border: 2px solid black;\r\n  transform: rotateY(180deg);\r\n  /* safari an chrome */\r\n  -webkit-transform: rotateY(180deg);\r\n  /* Firefox */\r\n  -moz-transform: rotateY(180deg)\r\n`\r\n\r\nexport default Call;","import React, { useState } from 'react';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport { AiFillCaretRight } from 'react-icons/ai'\r\n\r\nimport Call from './Call'\r\n\r\nfunction Dashboard({ handleChange }) {\r\n  const [createInput, setCreateInput] = useState(true)\r\n  const [joinInput, setJoinInput] = useState(true)\r\n\r\n  return (\r\n    <div>\r\n      <h2>Welcome to some Video Peer-to-Peer App</h2>\r\n      <div>\r\n        <button onClick={() => createInput ? setCreateInput(false) : setCreateInput(true)}>create room</button>\r\n        <input onChange={handleChange} placeholder='enter id for new room' hidden={createInput} />\r\n        <Link to=\"/call\" hidden={createInput}><AiFillCaretRight /></Link>\r\n      </div>\r\n      <div>\r\n        <button onClick={() => joinInput ? setJoinInput(false) : setJoinInput(true)}>join room</button>\r\n        <input onChange={handleChange} placeholder='enter id for new room' hidden={joinInput} />\r\n        <Link hidden={joinInput}><AiFillCaretRight /></Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport { AiFillCaretRight } from 'react-icons/ai'\r\n\r\nimport io from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\nimport styled from 'styled-components';\r\n\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport Dashboard from './components/Dashboard'\r\nimport Call from './components/Call'\r\n\r\n\r\nfunction App() {\r\n  const [createInput, setCreateInput] = useState(true)\r\n  const [joinInput, setJoinInput] = useState(true)\r\n  const [inputFeild, setInputField] = useState('')\r\n\r\n  const handleChange = (e) => {\r\n    setInputField(e.target.value)\r\n    console.log(inputFeild)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <Route exact path=\"/\" render={props =>\r\n          <Dashboard {...props}\r\n            handleChange={handleChange} />} />\r\n        <Route exact path=\"/call\" render={props => <Call {...props} inputFeild={inputFeild} />} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}